Each type of display or layout tool you mentioned serves a specific purpose in CSS for structuring content on a webpage. Here's how they differ:

### 1. **Flexbox** (`display: flex`)
Flexbox is a one-dimensional layout model used for laying out items in a row or a column. It's particularly useful for distributing space within items of a container, even when their size is unknown or dynamic.

- **Main feature**: Flexbox is designed for distributing items along a single axis (horizontal or vertical).
- **Use case**: Ideal for aligning elements like navigation bars, vertical centering, or responsive designs where elements need to grow, shrink, or be spaced consistently.
  
Example:
```css
.container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
```

### 2. **CSS Grid** (`display: grid`)
CSS Grid is a two-dimensional layout system, meaning it can handle both rows and columns simultaneously. It offers more control and flexibility than Flexbox for complex layouts.

- **Main feature**: You can position items within a grid, spanning rows and columns easily.
- **Use case**: Best suited for building entire web page layouts or complex components where you need precise control over both rows and columns.

Example:
```css
.container {
  display: grid;
  grid-template-columns: 1fr 2fr;
  grid-gap: 10px;
}
```

### 3. **Media Queries**
Media queries are not a layout method but a way to apply different styles based on screen size, orientation, or device type. They are used to make layouts responsive by changing the design depending on the viewport size.

- **Main feature**: Allows for different CSS styles at different breakpoints (screen widths, etc.).
- **Use case**: Creating responsive designs where content adjusts dynamically based on device (e.g., mobile, tablet, desktop).
  
Example:
```css
@media (max-width: 600px) {
  .container {
    flex-direction: column;
  }
}
```

### 4. **Bootstrap**
Bootstrap is a CSS framework that simplifies front-end development by providing pre-built classes and components for layout, styling, and design. Bootstrap 4/5 includes Flexbox for layout, while older versions used a float-based grid system. It also includes responsive utilities and media queries.

- **Main feature**: Ready-to-use components (buttons, navbars, etc.) and a grid system for responsive design.
- **Use case**: Quick prototyping and developing responsive layouts without writing custom CSS from scratch.

Example using Bootstrapâ€™s grid system:
```html
<div class="row">
  <div class="col-md-6">Column 1</div>
  <div class="col-md-6">Column 2</div>
</div>
```

### Differences Summary:
| Feature       | **Flexbox**               | **CSS Grid**             | **Media Queries**                 | **Bootstrap**                          |
|---------------|---------------------------|--------------------------|-----------------------------------|----------------------------------------|
| Layout        | One-dimensional (row/column) | Two-dimensional (rows & columns) | Responsive based on screen size | Pre-built classes for layouts & components |
| Flexibility   | Good for small components | Excellent for complex layouts | Applied on top of layouts        | Uses Flexbox or Grid (Bootstrap 4/5)    |
| Complexity    | Simple for linear layouts | More complex for control | Not a layout system (supplements others) | Simplifies development                 |
| Use Case      | Navbars, buttons, simple grids | Full web page layouts, dashboards | Responsive designs (mobile, desktop) | Rapid prototyping, cross-browser compatibility |

Each tool has its strengths, and they are often used together to create modern, responsive websites.